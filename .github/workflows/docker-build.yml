name: Docker Build CI

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
      - 'releases/**'
    tags:
      - 'v*'

env:
  REGISTRY_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/mdtdb


jobs:
  build:
    #environment: test
    #if: github.event.review.state == 'APPROVED'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - args:
              - name: BASE_IMAGE
                value: docker.idatatlas.com/postgres:16.2
              - name: MDTDB_VERSION
                value: 18.4
              - name: PG_HINT_PLAN_VERSION
                value: REL16_1_6_0
              - name: PGAUDIT_VERSION
                value: 16.0
              - name: NEXUS
                value: http://nexus.idatatlas.com
            platforms: linux/amd64,linux/arm64
    steps:
      -
        name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          if [[ ${{ matrix.platform }} == "linux/arm64" ]]; then
              echo "IS_ARM=true" >> $GITHUB_ENV
          else
              echo "IS_ARM=false" >> $GITHUB_ENV
          fi
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./postgres/public/
          #file: ./postgres/public/Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            ${{ fromJson(toJson(matrix.args)).[*].name }}=${{ fromJson(toJson(matrix.args)).[*].value }}
            IS_ARM=${{ env.IS_ARM }}
      -
        name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      -
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          VERSION="v16.18.4"
#          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
#            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
          docker buildx imagetools create $(jq -cr --arg version "$VERSION" '.tags | map((split(":")[0] + ":\($version)-" + split(":")[1])) | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
           $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
